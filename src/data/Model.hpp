//
//  Model.hpp
//

#ifndef Model_hpp
#define Model_hpp

#include <string>
#include <any>
#include <set>
#include <map>
#include <vector>

/**
 * Abstract class representing a row of a database table.
 * @author Julian Koksal
 * @date 2022-09-25
 */
class Model
{
    friend class DBHelper;
protected:
    /** The name of the SQL table that this model represents. */
    std::string tableName;
    
    /** The columns of the SQL table, in the correct order. */
    std::vector<std::string> columns;
    
    /** The primary key(s) of the SQL table. */
    std::set<std::string> keys;
    
    /**
     * True if the primary key is of type INTEGER and should have a unique value automatically chosen when inserting, false otherwise.
     */
    bool isAutoGeneratedKey;
    
    /**
     * Returns a map representation of this object where for each member variable there is a key value pair where
     * the key is the name of the member variable and the value is the value of the member variable.
     * @return A map representation of this object.
     */
    virtual std::map<std::string, std::any> toMap() const = 0;
    
    /**
     * Returns a pointer to a new object with member variables initialized according to mMap.
     * @param mMap A map representation of the object, as created by a call to toMap().
     * @return Pointer to the new model.
     */
    virtual Model * fromMap(std::map<std::string, std::any> mMap) const = 0;
};

#endif /* Model_hpp */
