//
//  OrderMaster.hpp
//

#ifndef OrderMaster_hpp
#define OrderMaster_hpp

#include <string>
#include <map>

#include "Model.hpp"

/**
 * @brief Class representing a row of the OrderMaster table.
 *
 * @author Julian Koksal
 * @date 2022-11-07
 */
class OrderMaster : public Model
{
public:
    /**
     * @brief Constructor.
     *
     * Creates a OrderMaster object initialized with the given values.
     *
     * @param orderNumber The order number (primary key).
     * @param orderedBy Name of the customer of who placed the order.
     * @param orderDate The date and time of the order.
     * @param isComplete Is the order completed.
     */
    OrderMaster(int orderNumber = 0, std::string orderedBy = "", std::string orderDate = "", bool isComplete = 0);
    
    /**
     * @brief Destructor.
     *
     * Does nothing.
     */
    ~OrderMaster();
    
    /**
     * @brief Gets the order number.
     *
     * @return orderNumber
     */
    int getOrderNumber();
    
    /**
     * @brief Gets orderedBy.
     *
     * @return orderedBy
     */
    std::string getOrderedBy();
    
    /**
     * @brief Gets the order date.
     *
     * @return orderDate
     */
    std::string getOrderDate();
    bool getIsComplete();
    
    /**
     * @brief Sets orderedBy.
     *
     * @param val The new value.
     */
    void setOrderedBy(std::string val);
    
    /**
     * @brief Sets orderDate.
     *
     * @param val The new value.
     */
    void setOrderDate(std::string val);
    
    /**
     * @brief Sets isComplete.
     *
     * @param val The new value.
     */
    void setIsComplete(bool val);
    
private:
    /**
     * @brief The order number (primary key).
     */
    int orderNumber;
    
    /**
     * @brief Name of the customer of who placed the order.
     */
    std::string orderedBy;
    
    /**
     * @brief The date and time of the order.
     */
    std::string orderDate;
    
    /**
     * @brief Is the order completed.
     */
    bool isComplete;
    
    virtual std::string tableName() const override;
    virtual std::vector<std::string> columns() const override;
    virtual std::set<std::string> keys() const override;
    virtual bool isAutoGeneratedKey() const override;
    virtual std::map<std::string, std::any> toMap() const override;
    virtual Model * fromMap(std::map<std::string, std::any> mMap) const override;
};

#endif /* OrderMaster_hpp */
